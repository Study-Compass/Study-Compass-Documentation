"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[468],{3914:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=s(4848),t=s(8453);const o={},a=void 0,i={id:"Backend/Backend Tutorial",title:"Backend Tutorial",description:"Here's a step-by-step guide to setting up an Express.js app with MongoDB (using Mongoose) that includes environment setup, GET/POST requests, and an introduction to Mongoose schemas.",source:"@site/docs/Backend/Backend Tutorial.md",sourceDirName:"Backend",slug:"/Backend/Backend Tutorial",permalink:"/docs/Backend/Backend Tutorial",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Backend/Backend Tutorial.md",tags:[],version:"current",frontMatter:{},sidebar:"documentation1",previous:{title:"Backend: Data Fetching Routes",permalink:"/docs/Backend/Backend Data Fetching Routes"},next:{title:"Database",permalink:"/docs/Database/"}},c={},d=[{value:"<strong>1. Set Up the Project</strong>",id:"1-set-up-the-project",level:3},{value:"Step 1: Initialize the Project",id:"step-1-initialize-the-project",level:4},{value:"Step 2: Install Dependencies",id:"step-2-install-dependencies",level:4},{value:"Step 3: Set Up Project Structure",id:"step-3-set-up-project-structure",level:4},{value:"Step 4: Configure <code>.gitignore</code> and Environment Variables",id:"step-4-configure-gitignore-and-environment-variables",level:4},{value:"<strong>2. Create the Express App</strong>",id:"2-create-the-express-app",level:3},{value:"Step 5: Set Up <code>app.js</code>",id:"step-5-set-up-appjs",level:4},{value:"Step 6: Add <code>nodemon</code> Script",id:"step-6-add-nodemon-script",level:4},{value:"<strong>3. Create a Mongoose Schema</strong>",id:"3-create-a-mongoose-schema",level:3},{value:"Step 7: Create <code>User</code> Schema",id:"step-7-create-user-schema",level:4},{value:"<strong>4. Create Routes for API Requests</strong>",id:"4-create-routes-for-api-requests",level:3},{value:"Step 8: Create Routes for Users",id:"step-8-create-routes-for-users",level:4},{value:"<strong>5. Test the API</strong>",id:"5-test-the-api",level:3},{value:"Step 9: Run the Server",id:"step-9-run-the-server",level:4},{value:"Step 10: Use Postman or cURL to Test the API",id:"step-10-use-postman-or-curl-to-test-the-api",level:4}];function l(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Here's a step-by-step guide to setting up an Express.js app with MongoDB (using Mongoose) that includes environment setup, GET/POST requests, and an introduction to Mongoose schemas."}),"\n",(0,r.jsx)(n.h3,{id:"1-set-up-the-project",children:(0,r.jsx)(n.strong,{children:"1. Set Up the Project"})}),"\n",(0,r.jsx)(n.h4,{id:"step-1-initialize-the-project",children:"Step 1: Initialize the Project"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"First, create a new directory for your project and navigate into it."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir express-mongo-tutorial\ncd express-mongo-tutorial\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initialize the project using npm:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm init -y\n"})}),"\n",(0,r.jsx)(n.h4,{id:"step-2-install-dependencies",children:"Step 2: Install Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You'll need to install ",(0,r.jsx)(n.code,{children:"express"}),", ",(0,r.jsx)(n.code,{children:"mongoose"}),", and ",(0,r.jsx)(n.code,{children:"dotenv"})," (for environment variables):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install express mongoose dotenv\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Additionally, install ",(0,r.jsx)(n.code,{children:"nodemon"})," as a development dependency to automatically restart the server on changes:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev nodemon\n"})}),"\n",(0,r.jsx)(n.h4,{id:"step-3-set-up-project-structure",children:"Step 3: Set Up Project Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create the following folders and files in the root of your project:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"express-mongo-tutorial/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 User.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 userRoutes.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"step-4-configure-gitignore-and-environment-variables",children:["Step 4: Configure ",(0,r.jsx)(n.code,{children:".gitignore"})," and Environment Variables"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.code,{children:".gitignore"})," file, add:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"node_modules\n.env\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the ",(0,r.jsx)(n.code,{children:".env"})," file, add your MongoDB connection string (replace ",(0,r.jsx)(n.code,{children:"<your-mongo-uri>"})," with your actual MongoDB URI):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MONGO_URI=<your-mongo-uri>\nPORT=5000\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-create-the-express-app",children:(0,r.jsx)(n.strong,{children:"2. Create the Express App"})}),"\n",(0,r.jsxs)(n.h4,{id:"step-5-set-up-appjs",children:["Step 5: Set Up ",(0,r.jsx)(n.code,{children:"app.js"})]}),"\n",(0,r.jsx)(n.p,{children:"This is the entry point of your application."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\nconst userRoutes = require('./routes/userRoutes');\n\n// Load environment variables\ndotenv.config();\n\n// Initialize Express\nconst app = express();\n\n// Middleware to parse JSON\napp.use(express.json());\n\n// Import routes\napp.use('/api/users', userRoutes);\n\n// MongoDB connection\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n})\n.then(() => console.log('MongoDB connected'))\n.catch((err) => console.log(err));\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"step-6-add-nodemon-script",children:["Step 6: Add ",(0,r.jsx)(n.code,{children:"nodemon"})," Script"]}),"\n",(0,r.jsxs)(n.p,{children:["To run the server with ",(0,r.jsx)(n.code,{children:"nodemon"}),", update the ",(0,r.jsx)(n.code,{children:"scripts"})," section in ",(0,r.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "start": "node app.js",\n  "dev": "nodemon app.js"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can now run the server in development mode with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-create-a-mongoose-schema",children:(0,r.jsx)(n.strong,{children:"3. Create a Mongoose Schema"})}),"\n",(0,r.jsxs)(n.h4,{id:"step-7-create-user-schema",children:["Step 7: Create ",(0,r.jsx)(n.code,{children:"User"})," Schema"]}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"models/"})," directory, create a file called ",(0,r.jsx)(n.code,{children:"User.js"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// models/User.js\nconst mongoose = require('mongoose');\n\n// Define the schema for a User\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  age: {\n    type: Number,\n    required: true,\n  }\n});\n\n// Create a model from the schema\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"})}),"\n",(0,r.jsx)(n.p,{children:"This schema defines a basic user with a name, email, and age."}),"\n",(0,r.jsx)(n.h3,{id:"4-create-routes-for-api-requests",children:(0,r.jsx)(n.strong,{children:"4. Create Routes for API Requests"})}),"\n",(0,r.jsx)(n.h4,{id:"step-8-create-routes-for-users",children:"Step 8: Create Routes for Users"}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"routes/"})," directory, create a file called ",(0,r.jsx)(n.code,{children:"userRoutes.js"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// routes/userRoutes.js\nconst express = require('express');\nconst User = require('../models/User');\n\nconst router = express.Router();\n\n// @route   GET /api/users\n// @desc    Get all users\nrouter.get('/', async (req, res) => {\n  try {\n    const users = await User.find();\n    res.json(users);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// @route   POST /api/users\n// @desc    Create a new user\nrouter.post('/', async (req, res) => {\n  const { name, email, age } = req.body;\n\n  // Create a new user object\n  const newUser = new User({\n    name,\n    email,\n    age,\n  });\n\n  try {\n    // Save the user to the database\n    const savedUser = await newUser.save();\n    res.status(201).json(savedUser);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\nmodule.exports = router;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-test-the-api",children:(0,r.jsx)(n.strong,{children:"5. Test the API"})}),"\n",(0,r.jsx)(n.h4,{id:"step-9-run-the-server",children:"Step 9: Run the Server"}),"\n",(0,r.jsx)(n.p,{children:"Ensure that your MongoDB instance is running. Then, run the server:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(n.h4,{id:"step-10-use-postman-or-curl-to-test-the-api",children:"Step 10: Use Postman or cURL to Test the API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Get all users:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"GET http://localhost:5000/api/users\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create a new user:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'POST http://localhost:5000/api/users\nContent-Type: application/json\n{\n  "name": "John Doe",\n  "email": "john@example.com",\n  "age": 25\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If everything is set up correctly, you should be able to fetch and create users in your MongoDB database."}),"\n",(0,r.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);